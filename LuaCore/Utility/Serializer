
local serializer = {}

local function tbl_contains(tbl, value)
    for _, v in pairs(tbl) do
        if v == value then
            return true
        end
    end
    return false
end

local METAMETHOD_NAMES = {
    "__index", "__newindex", "__call", "__concat", "__unm", "__add", "__sub", 
    "__mul", "__div", "__mod", "__pow", "__tostring", "__eq", "__lt", "__le",
    "__metatable", "__mode", "__len", "__pairs", "__ipairs", "__gc"
}

function serializer.createIndent(level)
    level = type(level) == "number" and level or 0
    return string.rep("  ", level)
end

function serializer.recreateFunction(f)
    local info = debug.getinfo(f, "un")
    local params = {}
    
    for i = 1, info.numparams or 0 do
        table.insert(params, "_" .. i)
    end
    
    if info.is_vararg then
        table.insert(params, "...")
    end
    
    local name = info.name or "<func>"
    return name .. "(" .. table.concat(params, ", ") .. ")"
end

function serializer.isService(instance)
    if type(instance) ~= "userdata" then
        return false
    end
    
    local success, service = pcall(function()
        return game:GetService(instance.ClassName)
    end)
    
    return success and service == instance
end

function serializer.formatPosition(value)
    if typeof(value) == "CFrame" then
        local pos = value.Position
        return string.format("CFrame.new(%f, %f, %f)", pos.X, pos.Y, pos.Z)
    elseif typeof(value) == "Vector3" then
        return string.format("Vector3.new(%f, %f, %f)", value.X, value.Y, value.Z)
    elseif typeof(value) == "Vector2" then
        return string.format("Vector2.new(%f, %f)", value.X, value.Y)
    end
    return tostring(value)
end

function serializer.formatMetamethod(metamethod)
    if type(metamethod) == "function" then
        return serializer.recreateFunction(metamethod)
    elseif type(metamethod) == "table" then
        return "table reference"
    else
        return tostring(metamethod)
    end
end

function serializer.formatValue(k, indentLevel, visitedTables)
    indentLevel = type(indentLevel) == "number" and indentLevel or 0
    visitedTables = visitedTables or {}
    
    local indent = serializer.createIndent(indentLevel)
    local innerIndent = serializer.createIndent(indentLevel + 1)

    if typeof(k) == "string" then
        return '"' .. k:gsub('\\', '\\\\'):gsub('"', '\\"'):gsub('\n', '\\n'):gsub('\r', '\\r'):gsub('\t', '\\t') .. '"'
    elseif typeof(k) == "number" then
        return string.format("%g", k)
    elseif typeof(k) == "boolean" then
        return tostring(k)
    elseif typeof(k) == "Enum" then
        return tostring(k)
    elseif typeof(k) == "EnumItem" then
        return tostring(k)
    elseif typeof(k) == "Vector2" or typeof(k) == "Vector3" or typeof(k) == "CFrame" then
        return serializer.formatPosition(k)
    elseif typeof(k) == "Color3" then
        local r, g, b = k.R, k.G, k.B
        return string.format("Color3.new(%f, %f, %f)", r, g, b)
    elseif serializer.isService(k) then
        return 'game:GetService("'..k.ClassName..'")'
    elseif typeof(k) == "Instance" then
        return "game." .. tostring(k:GetFullName())
    elseif typeof(k) == "function" then
        return serializer.recreateFunction(k)
    elseif typeof(k) == "thread" then
        return "<"..tostring(k)..">"
    elseif typeof(k) == "table" then
        if visitedTables[k] then
            return "<Circular Reference>"
        end
        visitedTables[k] = true

        local tableStr = "{\n"
        local keys = {}
        for key in pairs(k) do
            table.insert(keys, key)
        end
        table.sort(keys, function(a, b) 
            return tostring(a) < tostring(b) 
        end)

        for _, key in ipairs(keys) do
            local value = k[key]
            local keyStr = "[" .. serializer.formatValue(key, indentLevel + 1, visitedTables) .. "]"
            local valueStr = serializer.formatValue(value, indentLevel + 1, visitedTables)
            tableStr = tableStr .. innerIndent .. keyStr .. " = " .. valueStr .. ",\n"
        end
        
        local mt = getmetatable(k)
        if mt then
            tableStr = tableStr .. innerIndent .. "[__metatable] = {\n"
            
            for _, metamethodName in ipairs(METAMETHOD_NAMES) do
                local metamethod = mt[metamethodName]
                if metamethod ~= nil then
                    tableStr = tableStr .. 
                        innerIndent .. "  [" .. 
                        serializer.formatValue(metamethodName, indentLevel + 2, visitedTables) .. 
                        "] = " .. serializer.formatMetamethod(metamethod) .. ",\n"
                end
            end
            
            for key, value in pairs(mt) do
                if type(key) == "string" and key:match("^__") and 
                   not tbl_contains(METAMETHOD_NAMES, key) then
                    tableStr = tableStr .. 
                        innerIndent .. "  [" .. 
                        serializer.formatValue(key, indentLevel + 2, visitedTables) .. 
                        "] = " .. serializer.formatMetamethod(value) .. ",\n"
                end
            end
            
            tableStr = tableStr .. innerIndent .. "},\n"
        end
        
        visitedTables[k] = nil
        return tableStr .. indent .. "}"
    else
        print("-- Unknown type: " .. typeof(k))
        return "nil"
    end
end

function serializer.Serialize(t, indentLevel)
    indentLevel = type(indentLevel) == "number" and indentLevel or 0
    local indent = serializer.createIndent(indentLevel)
    local serializedTable = "{\n"

    local keys = {}
    for k in pairs(t) do
        table.insert(keys, k)
    end
    table.sort(keys, function(a, b) 
        return tostring(a) < tostring(b) 
    end)

    for _, k in ipairs(keys) do
        local v = t[k]
        local keyString = "[" .. serializer.formatValue(k, indentLevel + 1) .. "]"
        local valueString = serializer.formatValue(v, indentLevel + 1)
        serializedTable = serializedTable .. indent .. "  " .. keyString .. " = " .. valueString .. ",\n"
    end

    serializedTable = serializedTable .. indent .. "}"
    return serializedTable
end

getgenv().serializer = serializer
return serializer
--[[ 
    Usage:
    local serializer = require(script.Serializer)
    local myTable = { key1 = "value1", key2 = 42, key3 = game.Workspace }
    print(serializer.Serialize(myTable))
]]--
